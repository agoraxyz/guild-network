name: Branch based docker build and publish

# Language: rust
# Version: 2.0.0
# Runner: rust
# Visibility: private

on:
  push:
    branches: [main]
    # branches-ignore:
    #  - 'main'
    tags:
      - v*

env:
  DIVE_VERSION: v0.10

jobs:
  build:
    name: Build and publish the container image
    runs-on: rust
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3

      - name: Update submodules 
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          pacman -Sy --noconfirm lsof
          lsof $SSH_AUTH_SOCK | awk 'NR > 1 {print $2}' | xargs kill -15 || echo
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.RUSTY_GATE }}"
          git submodule update --init --recursive --remote

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.3.0
        with:
          cosign-release: "v1.8.0"

      - name: Install Syft
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Get current repository name
        run: echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")" >> $GITHUB_ENV
        shell: bash

      - name: Determine tag name
        run: |
          IMAGE_ID=${{ secrets.DOCKER_REPO }}/${{ secrets.DOCKER_LOGIN_NAME }}/$REPOSITORY_NAME

          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          load: true
          tags: app:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Login to External Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REPO }}
          username: ${{ secrets.DOCKER_LOGIN_NAME }}
          password: ${{ secrets.DOCKER_API_TOKEN }}

      - name: Check container image with dive
        run: |
          docker pull wagoodman/dive:$DIVE_VERSION
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --mount type=bind,source="$(pwd)"/.github/.dive-ci,target=/.dive-ci,readonly wagoodman/dive:$DIVE_VERSION --ci app:latest --ci-config /.dive-ci

      - name: Tag the container images
        run: |
          docker tag app:latest $IMAGE_ID:$VERSION

      - name: Setup Cosign Private Key
        run: echo "$KEY" > cosign.key
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Push container image to External Container Registry
        run: docker push $IMAGE_ID:$VERSION

      - name: Sign first container image
        run: |
          cosign sign --key cosign.key -a REPO=$REPOSITORY_NAME -a TAG=$VERSION -a SIGNER=GitHub -a DEVELOPER=${{ github.actor }} -a TIMESTAMP=$(date --iso-8601="seconds") $IMAGE_ID:$VERSION
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Generate SBOM, sign and push
        run: |
          syft attest --output syft-json --key cosign.key $IMAGE_ID:$VERSION > sbom_attestation.json
          cosign attach attestation --attestation sbom_attestation.json $IMAGE_ID:$VERSION
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Wipe cosign.key
        run: |
          openssl rand -hex 1024 > cosign.key
          rm cosign.key

      - name: Archive sbom results
        uses: actions/upload-artifact@v3
        with:
          name: SBOM-ATTESTATION
          path: sbom_attestation.json

  scanners:
    name: Scanners
    runs-on: rust
    needs: build
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    steps:

      - name: Setup Cosign Public Key
        run: echo "$KEY" > cosign.pub
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v2.3.0
        with:
          cosign-release: "v1.8.0"

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: SBOM-ATTESTATION

      - name: Scan SBOM attestation file
        run: |
          grype sbom_attestation.json --key cosign.pub --only-fixed -o table -f medium --file grype_report.txt
        continue-on-error: true

      - name: Archive grype results
        uses: actions/upload-artifact@v3
        with:
          name: GRYPE_REPORT
          path: grype_report.txt
