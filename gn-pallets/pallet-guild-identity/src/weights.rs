//! Autogenerated weights for `pallet_guild`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 19.0.0
//! DATE: 2023-02-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `razorblade`, CPU: `Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gn-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_guild
// --extrinsic
// *
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./gn-pallets/pallet-guild/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn register() -> Weight;
	fn deregister() -> Weight;
	fn authorize() -> Weight;
	fn link_address() -> Weight;
	fn unlink_address() -> Weight;
	fn remove_addresses() -> Weight;
	fn link_identity() -> Weight;
	fn unlink_identity() -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn register() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn deregister() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn authorize() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn link_address() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn unlink_address() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn remove_addresses() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn link_identity() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn unlink_identity() -> Weight {
		Weight::from_ref_time(1000)
	}
}

impl WeightInfo for () {
	fn register() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn deregister() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn authorize() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn link_address() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn unlink_address() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn remove_addresses() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn link_identity() -> Weight {
		Weight::from_ref_time(1000)
	}

	fn unlink_identity() -> Weight {
		Weight::from_ref_time(1000)
	}
}
